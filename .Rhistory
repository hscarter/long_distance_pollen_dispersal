popJ
popJchem <- ggplot(matingPopulationDistance, aes(axis1=patChem, axis2 = patSite, axis3=maternal, axis4=matChem)) +
geom_alluvium(aes(fill = patSite)) +
scale_fill_manual(values = c("#0072B2","#E69F00", "#F0E442", "lightgrey", "#009E73", "#56B4E9", "grey44"), na.value = "white") +
stat_stratum(aes(fill=Rouse),
geom="stratum")+
scale_x_discrete(limits = c("Paternal", "Maternal"),
expand = c(.05, .05)) +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
theme_minimal() +
labs(fill = "Population") +
ylab("Number of mating pairs")+
theme(legend.position="bottom")
popJchem
popJchemM <- ggplot(matingPopulationDistance[!is.na(matingPopulationDistance$patChem),], aes(axis1=patChem, axis2 = patSite, axis3=matChem, fill=patSite)) +
geom_alluvium(color="black") +
scale_fill_manual(values = c("#0072B2","#E69F00", "#F0E442", "lightgrey", "#009E73", "#56B4E9", "grey44"), na.value = "white") +
geom_stratum(width=c(rep(0.3,2), rep(0.5,5), rep(0.3,2)))+
scale_x_discrete(limits = c("Paternal
Chemotype", "Paternal
Population", "Maternal
Chemotype"),
expand = c(.05, .05)) +
geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
theme_minimal() +
labs(fill = "Population") +
ylab("Number of mating pairs")+
theme(legend.position="bottom")
popJchemM
by_matLin <- read.csv("~/Documents/GradSchool/Dissertation/Chapter1Mating/Data/by_matTrim.csv")
pheno <- lm(matLin~patLin, by_matLin)
# chi square test for phenotype
phenoChem <- table(by_matLin$chemotype.x, by_matLin$patLin)
chisq.test(phenoChem) # p = 0.1704
phenoPheno <- table(by_matLin$matLin, by_matLin$patLin)
chisq.test(phenoPheno) # p = 0.4233
# data
by_offspring <- read.csv("/Users/haley/Documents/GradSchool/Dissertation/Chapter1Mating/Data/by_offspring.csv")
# binary logistic regression for chemotype
chem <- glm(matchem~patchem, by_offspring, family = "binomial")
summary(chem)
# file paths:
scent_data <- "~/Documents/GradSchool/Dissertation/Chapter1Mating/Data/corridor_data_taniaCalc.csv"
morph_data <- "~/Documents/GradSchool/Dissertation/Chapter1Mating/Data/CorridorDataFinal.csv"
library(vegan)
library(ecodist)
library(randomForest)
library(dplyr)
library(ggplot2)
library(ggpubr)
# read in scent data
corridor_data <- read.csv(scent_data)
# read in morphology data
corridor_morph <- read.csv(morph_data)
# ANOSIM
#extract columns with morph data
names(corridor_morph)
corridorTrim <- na.omit(corridor_morph[, c(2, 3, 18:25)])
traits <- corridorTrim[, 3:ncol(corridorTrim)]
traits.matrix <- as.matrix(traits)
# square root transform the traits matrix...
sqrt.traits.dist <- distance(sqrt(traits.matrix), "bray-curtis")
# anosim by population
ano.sqrt <- anosim(sqrt.traits.dist, corridorTrim$site)
ano.sqrt #sig, R = 0.1184, p = 0.001
# extract columns with compound data
names(corridor_data)
corridorScent <- na.omit(corridor_data[, c(29, 31, 4:27)])
compounds <- corridorScent[, 3:ncol(corridorScent)]
compounds.matrix <- as.matrix(compounds)
# square root transform
sqrt.compounds.dist <- distance(sqrt(compounds.matrix), "bray-curtis")
# anosim by population
ano.sqrt.scent <- anosim(sqrt.compounds.dist, corridorScent$site)
ano.sqrt.scent # sig, R = 0.1984, p = 0.001
#anosim -- scent differentiation by linalool phenotype
lin_phenotype_Diffall <- anosim(sqrt.compounds.dist, corridorScent$linalool_phenotype)
lin_phenotype_Diffall # sig R = 0.4023, p = 0.001
#anosim -- scent differentiation by chemotype (lin+, lin-)
corridorScent$chemotype <- ifelse(corridorScent$linalool > 0, "lin+","lin-")
lin_chemotype_Diffall <- anosim(sqrt.compounds.dist, corridorScent$chemotype)
lin_chemotype_Diffall #sig R = 0.2782, p = 0.001
#### Random forest
# add scent data to morphology for all floral data together
chem_cols <- names(corridor_data[4:27])
all.floral <- left_join(select(corridor_morph, Name, site, floral.flare, filiment.length, style.length, tube.length, nectar.length, sucrose.equiv., corolla.mean), select(corridor_data, all_of(chem_cols), Name), by = c("Name" = "Name"))
all.floral <- na.omit(all.floral)
str(all.floral[, 3:ncol(all.floral)]) # they should all be numeric
all.floral$site <- as.factor(all.floral$site)
# random forest model
forest <- randomForest(all.floral$site~., data = all.floral[, 3:ncol(all.floral)], importance = T)
# view results
print(forest)
# importance of each predictor
import<-importance(forest,type = 1)
# quick plot
varImpPlot(forest)
# make a better plot
import<-data.frame(import)
import$traits<-row.names(import)
import$trait_type <- "scent"
import$trait_type[1:7] <- "morphology"
forestImportance <- ggplot(import, aes(x=MeanDecreaseAccuracy, y=reorder(traits, MeanDecreaseAccuracy), color = trait_type)) +
geom_point(shape=16, size =3, aes(fill=trait_type))+
ylab('traits') +
xlab('Mean Decrease in Accuracy') +
scale_color_manual(values=c("darkgray","black"))+
theme(#axis.text.x = element_blank(),
panel.grid.major.x= element_blank(),
panel.grid.minor.x= element_blank(),
panel.grid.major.y = element_line(colour = "lightgray", linetype = 'dashed'),
axis.title.y = element_blank(),
panel.background = element_rect(fill = "white", colour = "grey50"),
axis.ticks = element_blank(),
axis.line.x = element_line(color="black", size = 0.3),
axis.line.y = element_line(color="black", size = 0.3),
axis.text.x  = element_text(size = 12),
axis.text.y = element_text(size = 12),
legend.position = "bottom")
### whats different about the first three variables btw pops?
ocimene <- ggplot(all.floral, aes(x = site, y = trans.ocimene)) +
geom_boxplot() +
theme_minimal()
caryophyllene <- ggplot(all.floral, aes(x = site, y = beta.caryophyllene)) +
geom_boxplot() +
theme_minimal()
linalool <- ggplot(all.floral, aes(x = site, y = linalool)) +
geom_boxplot() +
theme_minimal()
boxes <- ggarrange(ocimene, caryophyllene, linalool, nrow = 3)
ggarrange(forestImportance, boxes)
### whats different about the first three variables btw pops?
ocimene <- ggplot(all.floral, aes(x = site, y = trans.ocimene)) +
geom_boxplot() +
labs(x = "Population", y = "Trans-$\beta_1$-ocimene")+
theme_minimal()
caryophyllene <- ggplot(all.floral, aes(x = site, y = beta.caryophyllene)) +
geom_boxplot() +
labs(x = "Population", y = "$\beta_1$-caryophyllene")+
theme_minimal()
linalool <- ggplot(all.floral, aes(x = site, y = linalool)) +
geom_boxplot() +
labs(x = "Population", y = "(R)-(-)-linalool")+
theme_minimal()
boxes <- ggarrange(ocimene, caryophyllene, linalool, nrow = 3)
ggarrange(forestImportance, boxes)
caryophyllene <- ggplot(all.floral, aes(x = site, y = beta.caryophyllene)) +
geom_boxplot() +
labs(x = "Population", y = "\beta_1-caryophyllene")+
theme_minimal()
boxes <- ggarrange(ocimene, caryophyllene, linalool, nrow = 3)
ggarrange(forestImportance, boxes)
install.packages("r2symbols")
library(r2symbols)
### whats different about the first three variables btw pops?
ocimene <- ggplot(all.floral, aes(x = site, y = trans.ocimene)) +
geom_boxplot() +
labs(x = "Population", y = paste("Trans-", symbol("beta"), "-ocimene", sep = ""))+
theme_minimal()
boxes <- ggarrange(ocimene, caryophyllene, linalool, nrow = 3)
ggarrange(forestImportance, boxes)
print(symbol("beta"))
symbol(beta)
### whats different about the first three variables btw pops?
ocimene <- ggplot(all.floral, aes(x = site, y = trans.ocimene)) +
geom_boxplot() +
labs(x = "Population", y = paste("Trans-", expression(beta), "-ocimene", sep = ""))+
theme_minimal()
boxes <- ggarrange(ocimene, caryophyllene, linalool, nrow = 3)
ggarrange(forestImportance, boxes)
expression(beta)
print(expression(beta))
### whats different about the first three variables btw pops?
ocimene <- ggplot(all.floral, aes(x = site, y = trans.ocimene)) +
geom_boxplot() +
labs(x = "Population", y = "Trans-\u03b2-ocimene")+
theme_minimal()
ocimene
caryophyllene <- ggplot(all.floral, aes(x = site, y = beta.caryophyllene)) +
geom_boxplot() +
labs(x = "Population", y = "\u03b2-caryophyllene")+
theme_minimal()
linalool <- ggplot(all.floral, aes(x = site, y = linalool)) +
geom_boxplot() +
labs(x = "Population", y = "(R)-(-)-linalool")+
theme_minimal()
boxes <- ggarrange(ocimene, caryophyllene, linalool, nrow = 3)
ggarrange(forestImportance, boxes)
View(all.floral)
# random forest between chemotypes ####
all.floral$chemotype <- 0
for (row in 1:nrow(all.floral)) {
if (all.floral$linalool[row] > 0) {
all.floral$chemotype <- 1
}
}
# random forest model
forestChemotype <- randomForest(all.floral$chemotype~., data = all.floral[, 3:ncol(all.floral)-1], importance = T)
# view results
print(forestChemotype)
# importance of each predictor
importChemotype<-importance(forestChemotype,type = 1)
# quick plot
varImpPlot(forestChemotype)
View(all.floral)
names(all.floral)
# just morph between pops ####
# random forest model
forestMorph <- randomForest(all.floral$site~., data = all.floral[, 3:9], importance = T)
# view results
print(forestMorph)
# importance of each predictor
importMorph <-importance(forestMorph, type = 1)
# quick plot
varImpPlot(forestMorph)
#anosim -- sim in morph by chemotype ####
anolinmorph.sqrt <- anosim(sqrt.traits.dist, corridorTrim$chemotype)
anolinmorph.sqrt
#### Separate Rouse and other populations
by_offspringTrim <- read.csv("/Users/haley/Documents/Dissertation/Chapter1Mating/Data/by_offspringTrim.csv")
by_offspringTrim$fatherNumeric <- as.numeric(by_offspringTrim$Candidate.father.ID)
# subset offspring with pollen donors from Rouse
withinRouse <- by_offspringTrim[which(by_offspringTrim$fatherNumeric >= 11 & by_offspringTrim$fatherNumeric <= 32),]
# subset offspring with pollen donors from outside Rouse
outsideRouse <- by_offspringTrim[which(by_offspringTrim$fatherNumeric < 11 | by_offspringTrim$fatherNumeric > 31),]
by_offspring <- left_join(by_offspring, dplyr::select(corridorFull, Name, site), by = c("Candidate.father.ID" = "Name"))
library(dplyr)
by_offspring <- left_join(by_offspring, dplyr::select(corridorFull, Name, site), by = c("Candidate.father.ID" = "Name"))
# file paths:
scent_data <- "~/Documents/GradSchool/Dissertation/Chapter1Mating/Data/corridor_data_taniaCalc.csv"
morph_data <- "~/Documents/GradSchool/Dissertation/Chapter1Mating/Data/CorridorDataFinal.csv"
# R libraries
library(vegan)
library(ecodist)
library(randomForest)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(r2symbols)
# read in scent data
corridor_data <- read.csv(scent_data)
# file paths:
scent_data <- "~/Documents/Dissertation/Chapter1Mating/Data/corridor_data_taniaCalc.csv"
morph_data <- "~/Documents/Dissertation/Chapter1Mating/Data/CorridorDataFinal.csv"
# read in scent data
corridor_data <- read.csv(scent_data)
# read in morphology data
corridor_morph <- read.csv(morph_data)
setwd("~/Documents/DispersalPaper/long_distance_pollen_dispersal/")
# data ####
corridorData <- read.csv("Data/morph_data.csv")
by_offspring <- read.csv("Data/by_offspring.csv")
# libraries
library(tidyverse)
library(sf)
library(patchwork)
library(car)
library(ggalluvial)
library(ggpubr)
setwd("~/Documents/DispersalPaper/long_distance_pollen_dispersal/")
# data ####
corridorData <- read.csv("Data/morph_data.csv")
by_offspring <- read.csv("Data/by_offspring.csv")
# combine for distance and paternal population
by_offspringT <- left_join(by_offspring, select(corridorData, Name, site), by = c("Candidate.father.ID" = "Name"))
# group by mating pair instead of offspring
by_mat <- select(by_offspringT, -Offspring.ID)
by_mat <- unique(by_mat)
table(by_mat$site)
# summarise pollen disperal distances
by_mat %>% group_by(site) %>%
summarise(count = n(), meanDist = mean(dist), sdDist = sd(dist), se = sd(dist)/sqrt(n()))
# distance chemotype overall ####
corridor <- corridorData %>%
dplyr::select(Name, site, chemotype, Lon, Lat) %>%
filter(complete.cases(.)) %>%
mutate(namechem = paste(Name, chemotype, sep = "_"))
# convert to spatial
corridor_sf <- st_as_sf(corridor, coords = c("Lon", "Lat"), crs = 4326)
# calculate distance matrix
distances <- st_distance(corridor_sf)
row.names(distances) <- corridor$namechem
# save as dataframe
distances_df <- as.data.frame(distances)
names(distances_df) <- corridor$namechem
# summarise and calculated average distances
dist_num <- distances_df %>%
mutate(across(everything(), as.numeric)) %>%
mutate(Name = row.names(.)) %>%
select(Name, everything()) %>%
separate(Name, into = c("Name", "chemotype"))
# between all plants
ave_all <- dist_num %>%
summarise(across(3:last_col(), mean)) %>%
t()
# add standard deviation
std_all <- dist_num %>%
summarise(across(3:last_col(), sd)) %>%
t()
# between chemotypes
lin_dist <- dist_num %>%
group_by(chemotype) %>%
summarise(across(2:last_col(), mean)) %>%
t()
lin_dist <- lin_dist[2:nrow(lin_dist), ]
# add standard deviation
lin_std <- dist_num %>%
group_by(chemotype) %>%
summarise(across(2:last_col(), sd)) %>%
t()
lin_std <- lin_std[2:nrow(lin_std), ]
# reformat with average distances added to individual data
dist_df <- corridor %>%
select(Name, site, chemotype)
dist_df <- cbind(dist_df, ave_all, std_all, lin_dist, lin_std)
names(dist_df) <- c("Name", "site", "chemotype", "ave_dist", "std_dist", "lin_m_dist", "lin_p_dist", "lin_m_std", "lin_p_std")
# convert to numerica
dist_df <- dist_df %>%
mutate(across(6:9, as.numeric))
# pivot longer for plotting
dist_long <- dist_df %>%
pivot_longer(cols = c(ave_dist, lin_m_dist, lin_p_dist), names_to = "type", values_to = "average_distance") %>%
mutate(labels = case_when(type == "ave_dist" ~ "All",
type == "lin_m_dist" ~ "lin-",
type == "lin_p_dist" ~ "lin+"))
# add which combo dist measure is for instead of chemotype of indiv plants
dist_long <- dist_long %>%
mutate(combos = paste(chemotype, type, sep = "_"))
# anova models
amod<-aov(average_distance ~ type, data = dist_long)
summary(amod) # p = 0.019
TukeyHSD(amod) # lin+ diff than lin-, p = 0.014
amod2 <- aov(average_distance ~ type * chemotype, data = dist_long)
summary(amod2) # both sig
# with all combinations
amod3 <- aov(average_distance ~ combos, data = dist_long)
summary(amod3)
TukeyHSD(amod3)
par(mfrow=c(2,2))
plot(amod3)
par(mfrow=c(1,1))
# rename chemotypes for figure
dist_long <- dist_long %>%
mutate(chemCode = case_when(chemotype == 0 ~ "lin- plants",
chemotype == 1 ~ "lin+ plants"))
# plot distances across range
rangeChemDist <- ggplot(dist_long, aes(labels, average_distance/1000))+
geom_boxplot(fill="lightgrey", color = "grey43", width = 0.3)+
theme_bw()+
labs(x ="", y = "Distance (km)")+
facet_wrap(vars(chemCode))
# calculate summary distances
dist_long %>%
group_by(type, chemotype) %>%
summarise(average = mean(average_distance),
n = n(),
sd = sd(average_distance),
se = sd/sqrt(n))
# clustering in Rouse ####
rouse <- corridorData %>%
dplyr::select(Name, site, chemotype, Lon, Lat) %>%
filter(complete.cases(.), site == "Rouse") %>%
mutate(namechem = paste(Name, chemotype, sep = "_"))
# conver to spatial
rouse_sf <- st_as_sf(rouse, coords = c("Lon", "Lat"), crs = 4326)
# calculate distance matrix
rouse_distances <- st_distance(rouse_sf)
row.names(rouse_distances) <- rouse$namechem
# save as dataframe
rouse_df <- as.data.frame(rouse_distances)
names(rouse_df) <- rouse$namechem
# calculate averages and standard deviations
rouse_dist_num <- rouse_df %>%
mutate(across(everything(), as.numeric)) %>%
mutate(Name = row.names(.)) %>%
select(Name, everything()) %>%
separate(Name, into = c("Name", "chemotype"))
ave_all_rouse <- rouse_dist_num %>%
summarise(across(3:last_col(), mean)) %>%
t()
std_all_rouse <- rouse_dist_num %>%
summarise(across(3:last_col(), sd)) %>%
t()
lin_dist_rouse <- rouse_dist_num %>%
group_by(chemotype) %>%
summarise(across(2:last_col(), mean)) %>%
t()
lin_dist_rouse <- lin_dist_rouse[2:nrow(lin_dist_rouse), ]
lin_std_rouse <- rouse_dist_num %>%
group_by(chemotype) %>%
summarise(across(2:last_col(), sd)) %>%
t()
lin_std_rouse <- lin_std_rouse[2:nrow(lin_std_rouse), ]
rouse_dist_df <- rouse %>%
select(Name, site, chemotype)
# reformat into dataframe
rouse_dist_df <- cbind(rouse_dist_df, ave_all_rouse, std_all_rouse, lin_dist_rouse, lin_std_rouse)
names(rouse_dist_df) <- c("Name", "site", "chemotype", "ave_dist", "std_dist", "lin_m_dist", "lin_p_dist", "lin_m_std", "lin_p_std")
# add ave distance to indiv plants
rouse_dist_df <- rouse_dist_df %>%
mutate(across(6:9, as.numeric))
# pivot for plotting
rouse_dist_long <- rouse_dist_df %>%
pivot_longer(cols = c(ave_dist, lin_m_dist, lin_p_dist), names_to = "type", values_to = "average_distance") %>%
mutate(labels = case_when(type == "ave_dist" ~ "All",
type == "lin_m_dist" ~ "lin-",
type == "lin_p_dist" ~ "lin+"))
rouse_dist_long <- rouse_dist_long %>%
mutate(combos = paste(chemotype, type, sep = "_"))
# anova model
amod3Rouse <- aov(average_distance ~ combos, data = rouse_dist_long)
summary(amod3Rouse)
TukeyHSD(amod3Rouse)
par(mfrow=c(2,2))
plot(amod3Rouse)
par(mfrow=c(1,1))
# change chemotype names for labels on plot
rouse_dist_long <- rouse_dist_long %>%
mutate(chemCode = case_when(chemotype == 0 ~ "lin- plants",
chemotype == 1 ~ "lin+ plants"))
# plot ave distances within rouse
rouseChemDist <-ggplot(rouse_dist_long, aes(labels, average_distance))+
geom_boxplot(fill="lightgrey", color = "grey43", width = 0.3)+
theme_bw()+
labs(x ="", y = "Distance (m)")+
facet_wrap(vars(chemCode))
# plot range and rouse together
rangeChemDist / rouseChemDist
ggplot(rouse_dist_long, aes(labels, average_distance))+
geom_violin(fill="lightgrey", color = "grey43")+
theme_bw()+
labs(x ="", y = "Distance (m)")+
facet_wrap(vars(chemotype))
# calculate summary
rouse_dist_long %>%
group_by(type, chemotype) %>%
summarise(average = mean(average_distance),
n = n(),
sd = sd(average_distance),
se = sd/sqrt(n))
# distance chemotype by cross ####
# change data for plot labels
by_mat <-  by_mat %>%
mutate(patchemotype = case_when(patchem == 0 ~ "lin-",
patchem == 1 ~ "lin+"),
matchemotype = case_when(matchem == 0 ~ "lin- maternal lines",
matchem == 1 ~ "lin+ maternal lines"))
# plot for range
mateDistRange<-ggplot(by_mat[!is.na(by_mat$patchem),], aes(patchemotype, dist/1000))+
geom_boxplot(fill = "lightgrey", color = "grey43", width = 0.3)+
theme_bw()+
labs(x = "Pollen donor chemotype", y = "Distance (km)")+
facet_wrap(vars(matchemotype))
# plot for rouse
mateDistRouse<-ggplot(by_mat[!is.na(by_mat$patchem) & by_mat$site == "Rouse",], aes(patchemotype, dist))+
geom_boxplot(fill = "lightgrey", color = "grey43", width = 0.3)+
theme_bw()+
labs(x = "Pollen donor chemotype", y = "Distance (m)")+
facet_wrap(vars(matchemotype))
mateDistRange / mateDistRouse
# all together for figure 5
ggarrange(rangeChemDist, mateDistRange, rouseChemDist, mateDistRouse, nrow = 2, ncol = 2, labels = c("A", "B", "C", "D"))
# summarise pollen disperal distances
by_mat %>% group_by(site) %>%
summarise(count = n(), meanDist = mean(dist), sdDist = sd(dist), se = sd(dist)/sqrt(n()))
dist_num
dist_df
# calculate summary distances
dist_long %>%
group_by(type, chemotype) %>%
summarise(average = mean(average_distance),
n = n(),
sd = sd(average_distance),
se = sd/sqrt(n))
rangeChemDist
# clustering in Rouse ####
rouse <- corridorData %>%
dplyr::select(Name, site, chemotype, Lon, Lat) %>%
filter(complete.cases(.), site == "Rouse") %>%
mutate(namechem = paste(Name, chemotype, sep = "_"))
# conver to spatial
rouse_sf <- st_as_sf(rouse, coords = c("Lon", "Lat"), crs = 4326)
# calculate distance matrix
rouse_distances <- st_distance(rouse_sf)
row.names(rouse_distances) <- rouse$namechem
# save as dataframe
rouse_df <- as.data.frame(rouse_distances)
names(rouse_df) <- rouse$namechem
# calculate averages and standard deviations
rouse_dist_num <- rouse_df %>%
mutate(across(everything(), as.numeric)) %>%
mutate(Name = row.names(.)) %>%
select(Name, everything()) %>%
separate(Name, into = c("Name", "chemotype"))
rouse_dist_num
by_mat
# calculate summary
rouse_dist_long %>%
group_by(type, chemotype) %>%
summarise(average = mean(average_distance),
n = n(),
sd = sd(average_distance),
se = sd/sqrt(n))
rouse_dist_num
# calculate summary distances
dist_long %>%
group_by(type, chemotype) %>%
summarise(average = mean(average_distance),
n = n(),
sd = sd(average_distance),
se = sd/sqrt(n))
rouse_df
